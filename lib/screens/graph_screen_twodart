import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:csv/csv.dart';

/*
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Windows App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: GraphScreenTwo(),  
    );
  }
}
*/

class GraphScreenTwo extends StatefulWidget {  
  const GraphScreenTwo({super.key});

  @override
  State<GraphScreenTwo> createState() => _GraphScreenTwoState();
}

class _GraphScreenTwoState extends State<GraphScreenTwo> {
  bool paused = false;
  String dropdownValue = '10';
  TextEditingController rangeStart = TextEditingController();
  TextEditingController rangeEnd = TextEditingController();
  TextEditingController plotName = TextEditingController();
  TextEditingController plotDescription = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Flutter Windows Example')),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              InkWell(
                onTap: () {
                  setState(() {
                    paused = !paused;
                  });
                },
                child: Icon(
                  paused ? Icons.play_circle_outline : Icons.pause_circle_outline,
                  size: 150,
                  color: paused
                      ? const Color.fromRGBO(1, 173, 50, 1)
                      : const Color.fromRGBO(0, 19, 150, 1),
                ),
              ),
              const SizedBox(height: 40),
              Container(
                width: 300,
                height: 48,
                decoration: BoxDecoration(
                  border: Border.all(color: const Color.fromRGBO(234, 234, 234, 1)),
                  borderRadius: BorderRadius.circular(20),
                  color: const Color.fromRGBO(238, 242, 255, 1),
                ),
                child: Padding(
                  padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),
                  child: DropdownButton<String>(
                    value: dropdownValue,
                    icon: const Icon(Icons.keyboard_arrow_down),
                    onChanged: (String? newValue) {
                      setState(() {
                        dropdownValue = newValue!;
                      });
                    },
                    items: ['10', '20', '30', '40']
                        .map<DropdownMenuItem<String>>((String value) {
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),
                  ),
                ),
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: () async {
                  // Gerar o CSV e salvar
                  await downloadCSV();
                },
                child: const Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    Text(
                      "Salvar   ",
                      style: TextStyle(fontSize: 14, color: Color.fromRGBO(1, 173, 50, 1)),
                    ),
                    Icon(
                      Icons.download,
                      size: 20,
                      color: Color.fromRGBO(1, 173, 50, 1),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> downloadCSV() async {
    // Gerar alguns dados de exemplo
    List<List<dynamic>> rows = [
      ["ID", "Valor"],
      [1, 10],
      [2, 20],
      [3, 30],
    ];

    // Converter para CSV
    String csv = const ListToCsvConverter().convert(rows);

    // Obter diret√≥rio para salvar o arquivo
    Directory directory = await getApplicationDocumentsDirectory();
    String filePath = '${directory.path}/dados.csv';

    // Salvar o arquivo CSV
    File file = File(filePath);
    await file.writeAsString(csv);

    // Mostrar mensagem de sucesso
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Arquivo CSV salvo em $filePath')),
    );
  }
}
